# coding : utf-8
__author__ = 'yorick'
d = {
    'a': {'1': '___▌▌___',
          '2': '__▌__▌__',
          '3': '_▌____▌_',
          '4': '_▌▌▌▌▌▌_',
          '5': '_▌____▌_',
          '6': '_▌____▌_'
          },
    'b': {'1': '_▌▌▌▌▌__',
          '2': '_▌____▌_',
          '3': '_▌▌▌▌▌__',
          '4': '_▌____▌_',
          '5': '_▌____▌_',
          '6': '_▌▌▌▌▌__'
          },
    'c': {'1': '__▌▌▌▌__',
          '2': '_▌____▌_',
          '3': '_▌______',
          '4': '_▌______',
          '5': '_▌____▌_',
          '6': '__▌▌▌▌__'
          },
    'd': {'1': '_▌▌▌▌▌__',
          '2': '_▌____▌_',
          '3': '_▌____▌_',
          '4': '_▌____▌_',
          '5': '_▌____▌_',
          '6': '_▌▌▌▌▌__'
          },
    'e': {'1': '_▌▌▌▌▌▌_',
          '2': '_▌______',
          '3': '_▌▌▌▌▌__',
          '4': '_▌______',
          '5': '_▌______',
          '6': '_▌▌▌▌▌▌_'
          },
    'f': {'1': '_▌▌▌▌▌▌_',
          '2': '_▌______',
          '3': '_▌▌▌▌▌__',
          '4': '_▌______',
          '5': '_▌______',
          '6': '_▌______'
          },
    'g': {'1': '__▌▌▌▌__',
          '2': '_▌____▌_',
          '3': '_▌______',
          '4': '_▌__▌▌▌_',
          '5': '_▌____▌_',
          '6': '__▌▌▌▌__'
          },
    'h': {'1': '_▌____▌_',
          '2': '_▌____▌_',
          '3': '_▌▌▌▌▌▌_',
          '4': '_▌____▌_',
          '5': '_▌____▌_',
          '6': '_▌____▌_'
          },
    'i': {'1': '____▌___',
          '2': '____▌___',
          '3': '____▌___',
          '4': '____▌___',
          '5': '____▌___',
          '6': '____▌___'
          },
    'j': {'1': '______▌_',
          '2': '______▌_',
          '3': '______▌_',
          '4': '______▌_',
          '5': '_▌____▌_',
          '6': '__▌▌▌▌__'
          },
    'k': {'1': '_▌____▌_',
          '2': '_▌___▌__',
          '3': '_▌▌▌▌___',
          '4': '_▌__▌___',
          '5': '_▌___▌__',
          '6': '_▌____▌_'
          },
    'l': {'1': '_▌______',
          '2': '_▌______',
          '3': '_▌______',
          '4': '_▌______',
          '5': '_▌______',
          '6': '_▌▌▌▌▌▌_'
          },
    'm': {'1': '_▌____▌_',
          '2': '_▌▌__▌▌_',
          '3': '_▌_▌▌_▌_',
          '4': '_▌____▌_',
          '5': '_▌____▌_',
          '6': '_▌____▌_'
          },
    'n': {'1': '_▌____▌_',
          '2': '_▌▌___▌_',
          '3': '_▌_▌__▌_',
          '4': '_▌__▌_▌_',
          '5': '_▌___▌▌_',
          '6': '_▌____▌_'
          },
    'o': {'1': '__▌▌▌▌__',
          '2': '_▌____▌_',
          '3': '_▌____▌_',
          '4': '_▌____▌_',
          '5': '_▌____▌_',
          '6': '__▌▌▌▌__'
          },
    'p': {'1': '_▌▌▌▌▌__',
          '2': '_▌____▌_',
          '3': '_▌____▌_',
          '4': '_▌▌▌▌▌__',
          '5': '_▌______',
          '6': '_▌______'
          },
    'q': {'1': '__▌▌▌▌__',
          '2': '_▌____▌_',
          '3': '_▌____▌_',
          '4': '_▌__▌_▌_',
          '5': '_▌___▌__',
          '6': '__▌▌▌_▌_'
          },
    'r': {'1': '_▌▌▌▌▌__',
          '2': '_▌____▌_',
          '3': '_▌____▌_',
          '4': '_▌▌▌▌▌__',
          '5': '_▌___▌__',
          '6': '_▌____▌_'
          },
    's': {'1': '__▌▌▌▌__',
          '2': '_▌______',
          '3': '__▌▌▌▌__',
          '4': '______▌_',
          '5': '_▌____▌_',
          '6': '__▌▌▌▌__'
          },
    't': {'1': '__▌▌▌▌▌_',
          '2': '____▌___',
          '3': '____▌___',
          '4': '____▌___',
          '5': '____▌___',
          '6': '____▌___'
          },
    'u': {'1': '_▌____▌_',
          '2': '_▌____▌_',
          '3': '_▌____▌_',
          '4': '_▌____▌_',
          '5': '_▌____▌_',
          '6': '__▌▌▌▌__'
          },
    'v': {'1': '_▌____▌_',
          '2': '_▌____▌_',
          '3': '_▌____▌_',
          '4': '_▌____▌_',
          '5': '__▌__▌__',
          '6': '___▌▌___'
          },
    'w': {'1': '_▌____▌_',
          '2': '_▌____▌_',
          '3': '_▌____▌_',
          '4': '_▌_▌▌_▌_',
          '5': '_▌▌__▌▌_',
          '6': '_▌____▌_'
          },
    'x': {'1': '_▌____▌_',
          '2': '__▌__▌__',
          '3': '___▌▌___',
          '4': '___▌▌___',
          '5': '__▌__▌__',
          '6': '_▌____▌_'
          },
    'y': {'1': '__▌___▌_',
          '2': '___▌_▌__',
          '3': '____▌___',
          '4': '____▌___',
          '5': '____▌___',
          '6': '____▌___'
          },
    'z': {'1': '_▌▌▌▌▌▌_',
          '2': '_____▌__',
          '3': '____▌___',
          '4': '___▌____',
          '5': '__▌_____',
          '6': '_▌▌▌▌▌▌_'
          },
    ' ': {'1': '________',
          '2': '________',
          '3': '________',
          '4': '________',
          '5': '________',
          '6': '________'
          },
    '?': {'1': '_▌▌▌▌▌__',
          '2': '▌_____▌_',
          '3': '______▌_',
          '4': '____▌▌__',
          '5': '___▌____',
          '6': '___▌____'
          },
    '!': {'1': '__▌▌▌___',
          '2': '__▌▌▌___',
          '3': '__▌▌▌___',
          '4': '___▌____',
          '5': '________',
          '6': '___▌____'
          },
    '%': {'1': '▌▌▌___▌_',
          '2': '▌_▌__▌__',
          '3': '▌▌▌_▌___',
          '4': '___▌____',
          '5': '__▌_▌▌▌_',
          '6': '▌___▌▌▌_'
          },
    '@': {'1': '_▌▌▌▌▌__',
          '2': '▌_____▌_',
          '3': '▌_▌▌▌_▌_',
          '4': '▌_▌_▌_▌_',
          '5': '▌_▌▌▌▌__',
          '6': '_▌▌▌▌▌__'
          },
    ':': {'1': '___▌____',
          '2': '__▌_▌___',
          '3': '___▌____',
          '4': '___▌____',
          '5': '__▌_▌___',
          '6': '___▌____'
          },
}


def main():
    """
    Данная функция запускается при запуске прилложения
    """
    # вводим текст
    text = input("Enter your text: ")
    # преобразуем текст к нижнему регистру
    text = text.lower()
    # разбиваем текст по пробелам в элементы списка
    li = text.split(' ')
    # генерируем новый список который содержит в себе кортежи строк возврашенных izmenel(x)
    try:
        r = [izmenel(x) for x in li]
        for x in range(0, len(r)):
            o, t, tr, fo, fi, si = r[x][0], r[x][1], r[x][2], r[x][3], r[x][4], r[x][5]
            vibor(o, t, tr, fo, fi, si)
    except:
        print('Enter only English letters')
    # выводим все в нужном порядке


def izmenel(tex):
    """
    данный метод использует словарь d и возврашает
    готовую строку
    """
    one = ''
    two = ''
    three = ''
    four = ''
    five = ''
    six = ''
    for x in tex:
        if x != ' ':
            one += d[x]['1']
            two += d[x]['2']
            three += d[x]['3']
            four += d[x]['4']
            five += d[x]['5']
            six += d[x]['6']

    return one, two, three, four, five, six


def vibor(one, two, three, four, five, six):
    """
    данный метод выводит сроки  в нужном порядке

    """
    print(one)
    print(two)
    print(three)
    print(four)
    print(five)
    print(six)
    print()


main()